{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"G:\\\\3-2 2020\\\\Mobile & Web Dev\\\\MyBlogApp\\\\Blog Application\\\\Blog-App\\\\src\\\\screens\\\\HomeScreen.js\";\n\nimport React, { useState, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { Text, Card, Avatar, Button, Input } from \"react-native-elements\";\nimport { FontAwesome, Entypo, AntDesign } from '@expo/vector-icons';\nimport { AuthContext } from \"../provider/AuthProvider\";\nimport { storeDataJSON, getDataJSON, removeData } from \"../functions/AsyncFunctions\";\n\nvar PostScreen = function PostScreen(props) {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      CurDate = _useState2[0],\n      setCurDate = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      Commentbody = _useState4[0],\n      setCommentbody = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      CommentList = _useState6[0],\n      setCommentList = _useState6[1];\n\n  useEffect(function () {\n    var date = new Date().getDate();\n    var month = new Date().getMonth() + 1;\n    var year = new Date().getFullYear();\n    setCurDate(date + '/' + month + '/' + year);\n\n    var getData = function getData() {\n      return _regeneratorRuntime.async(function getData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.t0 = setCommentList;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(getDataJSON('comments'));\n\n            case 3:\n              _context.t1 = _context.sent;\n              (0, _context.t0)(_context.t1);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    getData();\n  }, []);\n  return React.createElement(AuthContext.Consumer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, function (auth) {\n    return React.createElement(View, {\n      style: styles.viewStyle,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 17\n      }\n    }, React.createElement(Button, {\n      type: \"outline\",\n      title: \"Go Back\",\n      titleStyle: styles.buttonStyle,\n      buttonStyle: {\n        alignSelf: \"flex-start\",\n        marginLeft: 16,\n        paddingRight: 280\n      },\n      icon: React.createElement(AntDesign, {\n        name: \"back\",\n        size: 28,\n        color: \"black\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 31\n        }\n      }),\n      onPress: function onPress() {},\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 21\n      }\n    }), React.createElement(Card, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 21\n      }\n    }, React.createElement(View, {\n      style: {\n        flexDirection: \"row\",\n        alignItems: \"center\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 25\n      }\n    }, React.createElement(Avatar, {\n      containerStyle: {\n        backgroundColor: \"#F7E5FF\"\n      },\n      rounded: true,\n      icon: {\n        name: \"user\",\n        type: \"font-awesome\",\n        color: \"black\"\n      },\n      activeOpacity: 1,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 29\n      }\n    }), React.createElement(Text, {\n      h4Style: {\n        padding: 10\n      },\n      h4: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 29\n      }\n    }, auth.CurrentUser.name)), React.createElement(Text, {\n      style: {\n        fontStyle: \"italic\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 25\n      }\n    }, \"posted on \", props.date), React.createElement(Card.Divider, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 25\n      }\n    }), React.createElement(Text, {\n      style: {\n        paddingVertical: 10\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 25\n      }\n    }, props.body), React.createElement(Card.Divider, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 25\n      }\n    }), React.createElement(Card, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 25\n      }\n    }, React.createElement(View, {\n      style: {\n        flexDirection: \"row\",\n        alignItems: \"center\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 29\n      }\n    }, React.createElement(Text, {\n      style: {\n        paddingHorizontal: 10\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 33\n      }\n    }, \"Like:\"), React.createElement(Text, {\n      style: {\n        paddingHorizontal: 10\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 33\n      }\n    }, \"Comment:\")))), React.createElement(Card, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }\n    }, React.createElement(Input, {\n      multiline: true,\n      placeholder: \"Write Something\",\n      leftIcon: React.createElement(Entypo, {\n        name: \"pencil\",\n        size: 24,\n        color: \"black\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 39\n        }\n      }),\n      onChangeText: function onChangeText(val) {\n        setCommentbody(val);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 25\n      }\n    }), React.createElement(Button, {\n      title: \"Comment\",\n      titleStyle: styles.button2Style,\n      type: \"outline\",\n      onPress: function _callee() {\n        var array;\n        return _regeneratorRuntime.async(function _callee$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (CommentList != null) {\n                  setCommentList(function (comments) {\n                    return [].concat(_toConsumableArray(comments), [{\n                      name: auth.CurrentUser.name,\n                      date: CurDate,\n                      commentbody: Commentbody,\n                      key: Commentbody\n                    }]);\n                  });\n                } else {\n                  array = [];\n                  array.push({\n                    name: auth.CurrentUser.name,\n                    date: CurDate,\n                    commentbody: Commentbody,\n                    key: Commentbody\n                  });\n                  setCommentList(array);\n                }\n\n                _context2.next = 3;\n                return _regeneratorRuntime.awrap(storeDataJSON('comments', CommentList));\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 25\n      }\n    })), React.createElement(FlatList, {\n      data: CommentList,\n      renderItem: function renderItem(postitem) {\n        return React.createElement(CommentCard, {\n          author: postitem.item.name,\n          date: postitem.item.date,\n          body: postitem.item.commentbody,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 33\n          }\n        });\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }\n    }));\n  });\n};\n\nvar styles = StyleSheet.create({\n  textStyle: {\n    fontSize: 30,\n    color: \"blue\"\n  },\n  viewStyle: {\n    backgroundColor: \"white\",\n    flex: 1\n  },\n  buttonStyle: {\n    color: \"#4169E1\",\n    fontSize: 14,\n    fontWeight: \"100\",\n    marginLeft: 10\n  },\n  button2Style: {\n    color: \"#4169E1\",\n    fontSize: 16,\n    fontWeight: \"100\"\n  }\n});\nexport default PostScreen;","map":{"version":3,"sources":["G:/3-2 2020/Mobile & Web Dev/MyBlogApp/Blog Application/Blog-App/src/screens/HomeScreen.js"],"names":["React","useState","useEffect","Text","Card","Avatar","Button","Input","FontAwesome","Entypo","AntDesign","AuthContext","storeDataJSON","getDataJSON","removeData","PostScreen","props","CurDate","setCurDate","Commentbody","setCommentbody","CommentList","setCommentList","date","Date","getDate","month","getMonth","year","getFullYear","getData","auth","styles","viewStyle","buttonStyle","alignSelf","marginLeft","paddingRight","flexDirection","alignItems","backgroundColor","name","type","color","padding","CurrentUser","fontStyle","paddingVertical","body","paddingHorizontal","val","button2Style","comments","commentbody","key","array","push","postitem","item","StyleSheet","create","textStyle","fontSize","flex","fontWeight"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { View, StyleSheet, FlatList } from \"react-native\";\r\nimport { Text, Card, Avatar, Button, Input } from \"react-native-elements\";\r\nimport { FontAwesome, Entypo, AntDesign } from '@expo/vector-icons';\r\nimport { AuthContext } from \"../provider/AuthProvider\";\r\nimport { storeDataJSON, getDataJSON, removeData } from \"../functions/AsyncFunctions\";\r\n\r\nconst PostScreen = (props) => {\r\n    const [CurDate, setCurDate] = useState(\"\");\r\n    const [Commentbody, setCommentbody] = useState(\"\");\r\n    const [CommentList, setCommentList] = useState([]);\r\n\r\n    useEffect(() => {\r\n        var date = new Date().getDate();\r\n        var month = new Date().getMonth() + 1;\r\n        var year = new Date().getFullYear();\r\n        setCurDate(date + '/' + month + '/' + year);\r\n        const getData = async () => {\r\n            setCommentList(await getDataJSON('comments'));\r\n        }\r\n        getData();\r\n    }, []);\r\n\r\n    return (\r\n        <AuthContext.Consumer>\r\n            {(auth) => (\r\n                <View style={styles.viewStyle}>\r\n                    \r\n                    <Button\r\n                        type=\"outline\"\r\n                        title=\"Go Back\"\r\n                        titleStyle={styles.buttonStyle}\r\n                        buttonStyle={{ alignSelf: \"flex-start\", marginLeft: 16, paddingRight: 280 }}\r\n                        icon={<AntDesign name=\"back\" size={28} color=\"black\" />}\r\n                        onPress={\r\n                            function () {\r\n                                \r\n                            }}\r\n                    />\r\n\r\n                    <Card>\r\n                        <View style={{ flexDirection: \"row\", alignItems: \"center\" }}>\r\n                            <Avatar\r\n                                containerStyle={{ backgroundColor: \"#F7E5FF\" }}\r\n                                rounded\r\n                                icon={{ name: \"user\", type: \"font-awesome\", color: \"black\" }}\r\n                                activeOpacity={1}\r\n                            />\r\n                            <Text h4Style={{ padding: 10 }} h4>\r\n                                {auth.CurrentUser.name}\r\n                            </Text>\r\n                        </View>\r\n                        <Text style={{ fontStyle: \"italic\" }}>\r\n                            posted on {props.date}\r\n                        </Text>\r\n                        <Card.Divider />\r\n                        <Text\r\n                            style={{ paddingVertical: 10, }}>\r\n                            {props.body}\r\n                        </Text>\r\n                        <Card.Divider />\r\n                        <Card>\r\n                            <View style={{ flexDirection: \"row\", alignItems: \"center\" }}>\r\n\r\n                                <Text style={{ paddingHorizontal: 10 }}>\r\n                                    Like:\r\n              </Text>\r\n                                <Text style={{ paddingHorizontal: 10 }}>\r\n                                    Comment:\r\n              </Text>\r\n                            </View>\r\n                        </Card>\r\n                    </Card>\r\n                    <Card>\r\n                        <Input\r\n                            multiline\r\n                            placeholder=\"Write Something\"\r\n                            leftIcon={<Entypo name=\"pencil\" size={24} color=\"black\" />}\r\n                            onChangeText={function (val) {\r\n                                setCommentbody(val);\r\n                            }}\r\n                        />\r\n                        <Button title=\"Comment\" titleStyle={styles.button2Style}\r\n                            type=\"outline\"\r\n                            onPress={\r\n                                async function () {\r\n                                    if (CommentList != null) {\r\n                                        setCommentList(comments => [\r\n                                            ...comments,\r\n                                            {\r\n                                                name: auth.CurrentUser.name,\r\n                                                date: CurDate,\r\n                                                commentbody: Commentbody,\r\n                                                key: Commentbody,\r\n                                            },\r\n                                        ]);\r\n                                    }\r\n                                    else {\r\n                                        const array = [];\r\n                                        array.push({\r\n                                            name: auth.CurrentUser.name,\r\n                                            date: CurDate,\r\n                                            commentbody: Commentbody,\r\n                                            key: Commentbody,\r\n                                        });\r\n                                        setCommentList(array)\r\n                                    }\r\n                                    await storeDataJSON('comments', CommentList);\r\n                                }} >\r\n                        </Button>\r\n                    </Card>\r\n                    <FlatList\r\n                        data={CommentList}\r\n                        renderItem={postitem => {\r\n                            return (\r\n                                <CommentCard\r\n                                    author={postitem.item.name}\r\n                                    date={postitem.item.date}\r\n                                    body={postitem.item.commentbody}\r\n                                />\r\n                            )\r\n                        }}\r\n                    />\r\n\r\n                </View>\r\n            )}\r\n        </AuthContext.Consumer>\r\n    );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n    textStyle: {\r\n        fontSize: 30,\r\n        color: \"blue\",\r\n    },\r\n    viewStyle: {\r\n        backgroundColor: \"white\",\r\n        flex: 1,\r\n    },\r\n    buttonStyle: {\r\n        color: \"#4169E1\",\r\n        fontSize: 14,\r\n        fontWeight: \"100\",\r\n        marginLeft: 10,\r\n\r\n    },\r\n    button2Style: {\r\n        color: \"#4169E1\",\r\n        fontSize: 16,\r\n        fontWeight: \"100\",\r\n    }\r\n\r\n});\r\n\r\nexport default PostScreen;"]},"metadata":{},"sourceType":"module"}