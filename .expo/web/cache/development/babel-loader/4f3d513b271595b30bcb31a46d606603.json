{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"G:\\\\3-2 2020\\\\Mobile & Web Dev\\\\MyBlogApp\\\\Blog Application\\\\Blog-App\\\\src\\\\screens\\\\PostScreen.js\";\n\nimport React, { useState, useEffect } from \"react\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { Card, Button, Text, Avatar, Input, Header } from \"react-native-elements\";\nimport { Feather } from '@expo/vector-icons';\nimport { AntDesign, Entypo } from \"@expo/vector-icons\";\nimport { FontAwesome5 } from '@expo/vector-icons';\nimport { AuthContext } from \"../providers/AuthProvider\";\nimport CommentCard from \"../components/CommentCard\";\nimport { storeDataJSON, getDataJSON, removeData } from \"../functions/AsyncStorageFunctions\";\nimport moment from \"moment\";\n\nvar PostScreen = function PostScreen(props) {\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      commentBody = _useState2[0],\n      setcommentBody = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      commentArr = _useState4[0],\n      setcommentArr = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      notifArr = _useState6[0],\n      setnotifArr = _useState6[1];\n\n  var getComments = function getComments() {\n    return _regeneratorRuntime.async(function getComments$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(getDataJSON(props.route.params.post).then(function (data) {\n              if (data != null) {\n                setcommentArr(data);\n              } else setcommentArr([]);\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var notify = props.route.params.email.concat(\"notify\");\n\n  var getNotifications = function getNotifications() {\n    return _regeneratorRuntime.async(function getNotifications$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(getDataJSON(props.route.params.post).then(function (data) {\n              if (data == null) {\n                setnotifArr([]);\n              } else setnotifArr(data);\n            }));\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    getComments();\n  }, []);\n  useEffect(function () {\n    getNotifications();\n  }, [notifArr]);\n  return React.createElement(AuthContext.Consumer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, function (auth) {\n    return React.createElement(View, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }\n    }, React.createElement(Header, {\n      backgroundColor: \"blue\",\n      leftComponent: {\n        icon: \"menu\",\n        color: \"#fff\",\n        onPress: function onPress() {\n          props.navigation.toggleDrawer();\n        }\n      },\n      centerComponent: {\n        text: \"The Office\",\n        style: {\n          color: \"#fff\"\n        }\n      },\n      rightComponent: {\n        icon: \"lock-outline\",\n        color: \"#fff\",\n        onPress: function onPress() {\n          auth.setIsLoggedIn(false);\n          auth.setCurrentUser({});\n        }\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }\n    }), React.createElement(View, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }\n    }, React.createElement(Card, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 25\n      }\n    }, React.createElement(View, {\n      style: {\n        flexDirection: \"row\",\n        alignItems: \"center\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 29\n      }\n    }, React.createElement(Avatar, {\n      containerStyle: {\n        backgroundColor: \"#ffab91\"\n      },\n      rounded: true,\n      icon: {\n        name: \"user\",\n        type: \"font-awesome\",\n        color: \"black\"\n      },\n      activeOpacity: 1,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 33\n      }\n    }), React.createElement(Text, {\n      h4Style: {\n        padding: 10\n      },\n      h4: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 33\n      }\n    }, props.route.params.name)), React.createElement(Text, {\n      style: {\n        fontStyle: \"italic\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 29\n      }\n    }, \" Posted on \", props.date), React.createElement(Text, {\n      style: {\n        paddingVertical: 10\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 29\n      }\n    }, props.route.params.post), React.createElement(Input, {\n      placeholder: \"Write a comment\",\n      leftIcon: React.createElement(FontAwesome5, {\n        name: \"comments\",\n        size: 24,\n        color: \"black\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 43\n        }\n      }),\n      onChangeText: function onChangeText(currentInput) {\n        setcommentBody(currentInput);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 29\n      }\n    }), React.createElement(View, {\n      style: {\n        flexDirection: \"row\",\n        justifyContent: \"space-between\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 29\n      }\n    }, React.createElement(Button, {\n      type: \"outline\",\n      title: \"Comment\",\n      icon: React.createElement(AntDesign, {\n        name: \"like2\",\n        size: 24,\n        color: \"dodgerblue\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 43\n        }\n      }),\n      onPress: function _callee() {\n        var a, n;\n        return _regeneratorRuntime.async(function _callee$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                a = [].concat(_toConsumableArray(commentArr), [{\n                  name: auth.CurrentUser.name,\n                  email: auth.CurrentUser.email,\n                  date: moment().format(),\n                  comment: commentBody,\n                  key: commentBody\n                }]);\n                _context3.next = 3;\n                return _regeneratorRuntime.awrap(storeDataJSON(props.route.params.post, a).then(function () {\n                  setcommentArr(a);\n                }));\n\n              case 3:\n                if (!(auth.CurrentUser.email != props.route.params.email)) {\n                  _context3.next = 7;\n                  break;\n                }\n\n                n = [].concat(_toConsumableArray(notifArr), [{\n                  name: props.route.params.name,\n                  email: props.route.params.email,\n                  date: moment().format(\"DD MMM, YYYY\"),\n                  post: props.route.params.post,\n                  notification: auth.CurrentUser.name.concat(\" has commented on your post\"),\n                  key: commentBody,\n                  type: \"comment\"\n                }]);\n                _context3.next = 7;\n                return _regeneratorRuntime.awrap(storeDataJSON(notify, n).then(function () {\n                  setnotifArr(n);\n                }));\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 33\n      }\n    }))), React.createElement(FlatList, {\n      data: commentArr,\n      renderItem: function renderItem(cItem) {\n        return React.createElement(CommentCard, {\n          name: cItem.item.name,\n          email: cItem.item.email,\n          comment: cItem.item.comment,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 33\n          }\n        });\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 25\n      }\n    })));\n  });\n};\n\nexport default PostScreen;","map":{"version":3,"sources":["G:/3-2 2020/Mobile & Web Dev/MyBlogApp/Blog Application/Blog-App/src/screens/PostScreen.js"],"names":["React","useState","useEffect","Card","Button","Text","Avatar","Input","Header","Feather","AntDesign","Entypo","FontAwesome5","AuthContext","CommentCard","storeDataJSON","getDataJSON","removeData","moment","PostScreen","props","commentBody","setcommentBody","commentArr","setcommentArr","notifArr","setnotifArr","getComments","route","params","post","then","data","notify","email","concat","getNotifications","auth","icon","color","onPress","navigation","toggleDrawer","text","style","setIsLoggedIn","setCurrentUser","flexDirection","alignItems","backgroundColor","name","type","padding","fontStyle","date","paddingVertical","currentInput","justifyContent","a","CurrentUser","format","comment","key","n","notification","cItem","item"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { ScrollView, View, StyleSheet, FlatList } from \"react-native\";\r\nimport {\r\n    Card,\r\n    Button,\r\n    Text,\r\n    Avatar,\r\n    Input,\r\n    Header,\r\n} from \"react-native-elements\";\r\nimport { Feather } from '@expo/vector-icons';\r\nimport { AntDesign, Entypo } from \"@expo/vector-icons\";\r\nimport { FontAwesome5 } from '@expo/vector-icons';\r\nimport { AuthContext } from \"../providers/AuthProvider\";\r\nimport CommentCard from \"../components/CommentCard\";\r\nimport {\r\n    storeDataJSON,\r\n    getDataJSON,\r\n    removeData,\r\n} from \"../functions/AsyncStorageFunctions\";\r\nimport moment from \"moment\";\r\n\r\nconst PostScreen = (props) => {\r\n    let [commentBody, setcommentBody] = useState('');\r\n    let [commentArr, setcommentArr] = useState([]);\r\n    let [notifArr, setnotifArr] = useState([]);\r\n   \r\n    const getComments = async () => {\r\n        await getDataJSON(props.route.params.post).then((data) => {\r\n            if (data!= null) {\r\n                setcommentArr(data);\r\n            } else setcommentArr([]);\r\n        });\r\n    };\r\n    let notify = props.route.params.email.concat(\"notify\");\r\n\r\n    const getNotifications = async () => {\r\n        await getDataJSON(props.route.params.post).then((data) => {\r\n            if (data == null) {\r\n                setnotifArr([]);\r\n            } else setnotifArr(data);\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        getComments();\r\n    }, [])\r\n    useEffect(() => {\r\n        getNotifications();\r\n    }, [notifArr]);\r\n\r\n    \r\n    return (\r\n        <AuthContext.Consumer>\r\n            {(auth) => (\r\n                <View>\r\n                    <Header\r\n                        backgroundColor=\"blue\"\r\n                        leftComponent={{\r\n                            icon: \"menu\",\r\n                            color: \"#fff\",\r\n                            onPress: function () {\r\n                                props.navigation.toggleDrawer();\r\n                            },\r\n                        }}\r\n                        centerComponent={{ text: \"The Office\", style: { color: \"#fff\" } }}\r\n                        rightComponent={{\r\n                            icon: \"lock-outline\",\r\n                            color: \"#fff\",\r\n                            onPress: function () {\r\n                                auth.setIsLoggedIn(false);\r\n                                auth.setCurrentUser({});\r\n                            },\r\n                        }}\r\n                    />\r\n                    <View>\r\n                        <Card>\r\n                            <View\r\n                                style={{\r\n                                    flexDirection: \"row\",\r\n                                    alignItems: \"center\",\r\n                                }}\r\n                            >\r\n                                <Avatar\r\n                                    containerStyle={{ backgroundColor: \"#ffab91\" }}\r\n                                    rounded\r\n                                    icon={{ name: \"user\", type: \"font-awesome\", color: \"black\" }}\r\n                                    activeOpacity={1}\r\n                                />\r\n                                <Text h4Style={{ padding: 10 }} h4>\r\n                                    {props.route.params.name}\r\n                                </Text>\r\n                            </View>\r\n                            <Text style={{ fontStyle: \"italic\" }}> Posted on {props.date}</Text>\r\n                            <Text\r\n                                style={{\r\n                                    paddingVertical: 10,\r\n                                }}\r\n                            >\r\n                                {props.route.params.post}\r\n                            </Text>\r\n                            <Input\r\n                                placeholder=\"Write a comment\"\r\n                                leftIcon={<FontAwesome5 name=\"comments\" size={24} color=\"black\" />}\r\n                                onChangeText={function (currentInput) {\r\n                                    setcommentBody(currentInput);\r\n                                }}\r\n                            />\r\n                            <View style={{ flexDirection: \"row\", justifyContent: \"space-between\" }}>\r\n                                <Button\r\n                                    type=\"outline\"\r\n                                    title=\"Comment\"\r\n                                    icon={<AntDesign name=\"like2\" size={24} color=\"dodgerblue\" />}\r\n                                    onPress={async function () {\r\n                                        let a = [\r\n                                            ...commentArr,\r\n                                            {\r\n                                                name: auth.CurrentUser.name,\r\n                                                email: auth.CurrentUser.email,\r\n                                                date: moment().format(),\r\n                                                comment: commentBody,\r\n                                                key: commentBody\r\n                                            }\r\n                                        ];\r\n                                        await storeDataJSON(props.route.params.post, a).then(() => {\r\n                                            setcommentArr(a);\r\n                                        });\r\n                                        if (auth.CurrentUser.email != props.route.params.email) {\r\n                                            let n = [\r\n                                                ...notifArr,\r\n                                                {\r\n                                                    name: props.route.params.name,\r\n                                                    email: props.route.params.email,\r\n                                                    date: moment().format(\"DD MMM, YYYY\"),\r\n                                                    post: props.route.params.post,\r\n                                                    notification: auth.CurrentUser.name.concat(\" has commented on your post\"),\r\n                                                    key: commentBody,\r\n                                                    type: \"comment\",\r\n                                                }\r\n                                            ];\r\n                                            await storeDataJSON(notify, n).then(() => {\r\n                                                setnotifArr(n);\r\n                                            });\r\n                                        }\r\n\r\n                                    }}\r\n\r\n\r\n\r\n                                />\r\n                            </View>\r\n\r\n\r\n                        </Card>\r\n                        <FlatList\r\n                            data={commentArr}\r\n                            renderItem={cItem => (\r\n                                <CommentCard\r\n                                    name={cItem.item.name}\r\n                                    email={cItem.item.email}\r\n                                    comment={cItem.item.comment}\r\n                                />\r\n                            )}\r\n                        />\r\n                    </View>\r\n                </View>\r\n            )}\r\n        </AuthContext.Consumer>\r\n    );\r\n\r\n};\r\nexport default PostScreen;\r\n"]},"metadata":{},"sourceType":"module"}